1、Django请求的生命周期
	武彦涛：
		路由系统 ->视图函数（获取模板+数据=》渲染） -〉 字符串返回给用户

2、路由系统
	王腾：
		/index/ 					-> 函数或类.as_view()
		/detil/(\d+)/ 				-> 函数(参数) 或 类.as_view() （参数）
		/detil/(?P<nid>\d+)/ 		-> 函数(参数) 或 类.as_view() （参数）
		/detil/						-> include('app01.urls')
		/detil/		name='a1'		-> include('app01.urls')
									-  视图中：reverse
									-  模板中：{% url "a1" %}

3、视图
	陈一波：
	FBV：函数
		def index(request，*args, **kwargs):
			..

	CBV:类
		class Home(views.View):
			def get(self, request, *args, **kwargs):
				..

		# 获取用户请求数据
			request.POST.get()
			request.GET.get()
			request.FILES.get()

			# checkbox,
			..........getList()

			request.path_info

			文件对象 = request.FILES.get()
			文件对象.name
			文件对象.size
			文件对象.chunks()

			# <form 特殊的设置></form>

	给用户返回数据：
		render(request,"模板文件的路径",{'k1':[1,2,3,4],'k2':['name':'张扬','age':73]})
		redirect('URL')
		HttpResponse(字符串)

4、模版语言
	冯国富：
		request,"模板文件的路径",{'obj':1234, k1':[1,2,3,4],'k2':['name':'张扬','age':73]})

		<html>
		<body>
			<h1>{{ obj }}</h1>
			<h1>{{ k1.3 }}</h1>
			<h1>{{ k2.name }}</h1>

			#循环列表
			{% for i in k1 %}
				<p>{{ i }}</p>
			{% endfor %}

			#	循环字典
			{% for row in k2.keys %}
				{{ row }}
			{% enfor %}

			{% for row in k2.value %}
				{{ row }}
			{% enfor %}

			{% for k,v in k2.items %}
				{{ k }} - {{ v }}
			{% enfor %}
		</body
		</html>

5、ORM
	a.创建类和字段
		class User(models.Model):
			age = models.IntergerFiled()	#整数后面加长度一点用没有
			name = models.CharField(max_length=12) #12是字符长度

		python manage.py makemigrations
		python manage.py migrate

		#settings.py 要注册APP

	b.操作
	增
		models.User.objects.create(name='qiangxiaohu',age=18)
		dic={'name':'xx','age':19}
		models.User.objects.create(**dic)

		obj = models.User(name='qiangxiaohu',age=18)
		obj.save

	删
		models.User.objects.fileter(id=1).delete()
	改
		models.User.objects.fileter(id__gt=1).update(name='alex',age=18)
		dic={'name':'xx','age':19}
		models.User.objects.filter(id__gt=1).update(**dic)

	查
		models.User.objects.filter(id=1,name='root')
		models.User.objects.filter(id__gt=1,name='root')
		models.User.objects.filter(id__lt=1)
		models.User.objects.filter(id__gte=1)
		models.User.objects.filter(id_lte=1)

		models.User.objects.filter(id=1, name='root')
		dic = {'name':'xx','age':19}
		models.User.objects.filter(**dic)



		v1 = models.Business.objects.all()
	    #QuerySet，内部元素都是对象
	    # [obj(id,caption,code),obj,obj,obj]

	    v2 = models.Business.objects.all().values('id','caption','code')
	    # QuerySet，内部元素都是字典
	    # [{'id':1 ,'caption':'运维部','code':1}]  

	    v3 = models.Business.objects.all().values_list('id', 'caption', 'code')
	    # QuerySet，内部元素都是元组
	    # [(1,运维部),(2,开发部)] 

	    return render(request,'business.html',{'v1' : v1,'v2':v2, 'v3':v3})

	    # 获取到的一个对象，如果不存在就报错
	    models.Business.objects.get(id=1)
	    对象或者None=
	    models.Business.objects.filter(id=1).first()

	    外键：
	    	v = models.Host.objects.filter(nid__gt=0)
	    	v[0].b.caption --->通过.进行跨表






	外键：
		class UserType(models.Model):
			caption = models.CharField(max_length=32)

		 id  caption
		# 1.普通用户
		# 2.vip用户
		# 3.游客

		class User(models.Model):
			age = models.IntergerField()
			name = models.CharField(max_length=10) #字符长度
			# user_type_id = models.IntergerField() #约束
			user_type = models.ForeignKey('UserType', to_field='id') #约束


		  name      age   user_type_id
		# 张扬 		18		3
		# 张A扬		18		2
		# 张B扬		18		2



		position:fixed absolute relative


		Ajax
			#jquery 提供的ajax功能,本质就是这个
			$.ajax({
				url: '/host',
				type: 'POST',
				data: {'k1':123,'k2':"root"}
				success: function(data){
					// data是服务器端返回的字符串
					var obj = JSON.parse(data);
				}
			})

			建议：永远让服务器端返回一个字典
			return HttpResponse(json.dunmps(字典))

			form提交肯定会刷新

			render值返回字符串

  			$.get(url='xx',data='xx')
  			$.getJson
  			$.post



  		无法直接对第三张表进行操作

  		obj = Application.obj.get(id=1)
  		obj.name

  		第三张表操作

  		增加
  		obj.r.add(1)
  		obj.r.add(2)
  		obj.r.add(2,3,4)
  		obj.r.add(*[1,2,3,4])

  		删除
  		obj.r.remove(1)
  		obj.r.remove(2,3)
  		obj.r.remove(*[1,2,3])

  		清除
  		obj.r.clear()

  		更新
  		obj.r.set([3,5,7])

  		# 所有相关的主机对象‘列表’
  		obj.r.all()		#里面是host对象，每个主机对象里面是